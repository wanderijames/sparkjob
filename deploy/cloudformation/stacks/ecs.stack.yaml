AWSTemplateFormatVersion: '2010-09-09'
Description: Creating ECS Fargate resources
Parameters:
  LoadBalancerSG:
    Description: Load balancer security group.
    Type: String
  VPC:
    Description: The VPC to use for redhsift.
    Type: String
  PublicLoadBalancer:
    Description: Load balancer.
    Type: String
  PublicSubnetOne:
    Description: Public subnet.
    Type: String
  PublicSubnetTwo:
    Description: Public subnet.
    Type: String
  ContainerPort:
    Description: Port to expose
    Type: String
    Default: "8998"
  ServiceName:
    Description: ECS Service name
    Type: String
    Default: ecs-service
  ContainerName:
    Description: Container name
    Type: String
    Default: spark-app
  DBPassword:
    Description: Redshift passowrd
    Type: String
    Default: ThisPostgres123
    NoEcho: 'true'
  DBUser:
    Description: Redshift username
    Type: String
    Default: postgres
    NoEcho: 'true'
  DBHost:
    Description: Redshift host
    Type: String





Resources:
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  # A security group for the containers we will run in Fargate.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other members of the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'LoadBalancerSG'

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  SparkLivyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: spark-fargate
      NetworkMode: awsvpc
      ContainerDefinitions:
      - Name: !Ref ContainerName
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/spark-livy'
        Essential: true
        PortMappings:
        - Protocol: tcp
          ContainerPort: !Ref ContainerPort
          HostPort: 8998
        EntryPoint: []
        Command:
        - "/opt/livy/bin/livy-server"
        Environment:
        - Name: SOURCE_JDBC_URL
          Value: !Sub 'jdbc:postgresql://${DBHost}:5432/${DBUser}'
        - Name: SOURCE_JDBC_USER
          Value: !Ref DBUser
        - Name: SOURCE_JDBC_PASSWORD
          Value: !Ref DBPassword
        - Name: DWH_JDBC_URL
          Value: !Sub 'jdbc:postgresql://${DBHost}:5432/${DBUser}'
        - Name: DWH_JDBC_USER
          Value: !Ref DBUser
        - Name: DWH_JDBC_PASSWORD
          Value: !Sub 'jdbc:postgresql://${PublicLoadBalancer}:5432/${DBUser}'
      RequiresCompatibilities:
      - FARGATE
      Cpu: 4096
      Memory: 8192
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn'


  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 14400
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
      TaskDefinition: !Ref SparkLivyTaskDefinition
      LoadBalancers:
      - ContainerName: !Ref ContainerName
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref TargetGroup


  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref ServiceName
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 8998
      Protocol: HTTP

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref TargetGroup
        Type: 'forward'
      Conditions:
      - Field: path-pattern
        Values:
        - "*"
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 1


# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'FargateContainerSecurityGroup'
  SparkLivyTaskDefinition:
    Description: Fargate task definition
    Value: !Ref 'SparkLivyTaskDefinition'
